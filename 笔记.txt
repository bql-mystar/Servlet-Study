  Servlet的生命周期
  1、被创建：执行init方法，只执行一次
         Servlet什么时候被创建？
                   默认情况下，第一次访问时，Servlet被创建
                   可以配置执行Servlet的创建时机，通过配置web.xml中的<load-on-startup>标签的值及性能配置
                   一般用于加载资源

          Servlet的init方法只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的
                   多个用户同时访问，可能存在线程安全问题
                   解决：尽量不要在Servlet中定义成员变量，即使定义了成员变量，也不要修改值

  2、提供服务：执行service方法，执行多次
          每次访问Servlet时，Service方法都会被调用一次

  3、被销毁：执行destroy方法，只执行一次
           Servlet被销毁时执行，服务器关闭时，Servlet被销毁，
           只有服务器正常关闭时，才会执行destroy方法
           是在Servlet被销毁前执行，一般用于释放资源


  工作空间项目    和    tomcat部署的web项目(存在工作空间的out目录下)
        tomcat真正访问的是 “tomcat部署的web项目”, 这个项目对应着“工作空间项目”的目录下的所有资源，也就是web路径下的所有资源
        "tomcat部署的web项目"路径下的WEB-INF下的classes中的内容来源于，src下的Java文件，经过编译后，放到WEB-INF/classes

        WEB-INF目录下的资源不能被浏览器直接访问

  GenericServlet:将Servlet接口中其它的方法做了默认空实现，只将service()方法作为抽象
        将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可

  HttpServlet：对http协议的一种封装，简化操作
         1、定义继承HttpServlet
         2、复写doGet/doPost方法

  Servlet相关配置
         1、urlpattern：Servlet访问路径，可以是一个数组
                一个servlet可以定义多个访问路径
         2、路径定义规则：
                1、/xxx
                2、/xxx/xxx:多层路径，目录结构
                3、*.do

  超文本传输协议：定义了 客户端 和 服务器 通信时 发送的数据格式
  特点：
        1、基于TCP/IP的高级协议
        2、默认端口号：80
        3、基于请求/响应模型：一次请求对应一次响应
        4、无状态的：每次请求之间相互独立，不能交互数据

  历史版本
        1.0：每一次请求都会建立新的连接
        1.1：复用连接

  GET:
        1、请求参数在请求行中，在url后
        2、请求的url长度有限制
        3、不太安全

  POST:
        1、请求参数在请求体中
        2、请求的url长度没有限制
        3、相对安全

  常见的请求头：
        User-Agent：浏览器告诉服务器，浏览器的版本信息
                可以在服务器获取该头信息，解决浏览器的兼容性问题

        Referer：告诉服务器，当前请求的来源
             作用：
                    1、防盗链
                    2、统计工作

  request功能：
        1、获取请求信息
            1、获取请求行信息
                获取请求方式：String getMethod()
                获取虚拟目录：String getContextPath()
                获取Servlet路径：String getServletPath()
                获取get方式请求参数：String getQueryString()
                获取请求的URI：String getRequestURI()  String getRequestURL()
                        URL：统一资源定位符
                        URI：统一资源标识符
                获取协议及版本：String getProtocol()
                获取客户机的ip地址：String getRemoteAddr()
            2、获取请求头信息
                String getHeader(String name)：通过请求头的名称获取请求头的值
                Enumeration<String> getHeaderNames()：获取所有的请求头名称
            3、获取请求体信息
                请求体：只有POST请求方式才有请求体，在请求体中封装了POST的请求参数
                步骤：
                    1、获取流对象
                        1、BufferedReader getReader()：获取字符输入流，只能操作字符数据
                        2、ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型的数据
                            常用于文件上传
                    2、再从流对象中拿数据
        2、其他功能
            1、获取请求参数通用方式    不论是get还是post请求方式都可以使用下列的方式来获取参数
                1、String getParameter(String name)：根据参数名称来获取参数值
                2、String[] getParameterValues(String name)：根据参数名称来获取参数值的数组
                3、Enumeration<String> getParameterNames()：获取所有请求的参数名称
                4、Map<String, String[]> getParameterMap()：获取所有参数的map集合

                中文乱码问题：
                    get方式：tomcat8 已经将get方式乱码问题解决了
                    post方式：会乱码
                        解决方式：在获取参数前，设置request的编码    req.setCharacterEncoding("utf-8");

            2、请求转发：一种在服务器内部的资源跳转方式
                步骤：
                    1、通过request对象获取请求转发器对象：RequestDispathcher getRequestDispathcher(String path)
                    2、使用RequestDispathcher对象进行转发：forward(ServletRequest request, ServletResponse response)

                特点：
                    1、浏览器地址栏没有发生变化
                    2、只能访问到当前服务器内部资源中
                    3、转发是一次请求

            3、共享数据
                域对象：一个有作用范围的对象，可以在范围内共享数据
                request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据
                方法：
                    1、void setAttribute(String name, Object obj)：存储数据
                    2、Object getAttribute(String name)：通过键获取对象
                    3、void removeAttribute(String name)：通过键移除键值对

            4、获取ServletContext
                ServletContext getServletContext()


            前端页面form表单的action路径的写法：
                虚拟表单 + Servlet的资源路径

            BeanUtils工具类，简化数据封装
                1、用于封装JavaBean
                    1、JavaBean：标准的Java类
                        1、类必须被public修饰
                        2、必须提供空参的构造器
                        3、成员变量必须使用private修饰
                        4、提供公共的setter和getter方法

                    2、功能：封装数据

                2、概念：
                    成员变量：
                    属性：setter和getter方法截取后的产物    如：setUsername --> username

                    大多数情况下成员变量与属性相同

                3、方法：
                    1、setProperty()
                    2、getProperty()
                    3、populate(Object obj, Map map)：将map集合的键值对信息，封装到对应的JavaBean对象中

  HTTP协议：
        1、请求消息：客户端发送给服务器端的数据
            响应状态码：服务器告诉客户端浏览器本次请求服务和响应的一个状态
                分类：
                    1xx：服务器接收客户端消息，但没有接收完成，等待一段时间后，发送1xx状态码
                    2xx：成功
                    3xx：重定向。  302(重定向)，304(访问缓存)
                    4xx：客户端错误   404   405(请求方式没有对应的方法)
                    5xx：服务器端错误  500

            常间的响应头：
                Content-Type：服务器告诉客户端浏览器本次响应体数据格式以及编码格式
                Content-disposition：服务器告诉客户端以什么样的格式打开响应体数据
                    值：
                        in-line：默认值，在当前页面内打开
                        attachment;filename=xxx：以附件形式打开响应体。常用于文件下载

        2、响应消息：服务器端发送给客户端的数据

  Response对象：
    功能：设置响应消息
        1、设置响应行
            设置状态码：setStatus(int sc)
        2、设置响应头：setHeader(String name, String value)
        3、设置响应体：
            使用步骤：
                1、获取输出流：
                    字符输出流：PrintWriter getWriter()   默认编码方式ISO-8859-1
                    注意：
                        乱码问题：
                            编解码方式不一致
                            设置该流的默认编码
                            告诉浏览器响应使用的编码
                            response.setContentType("text/html;charset=utf-8"); // 必须要在获取流之前设置
                    字节输出流：ServletOutputStream getOutputStream()


                2、使用输出流，将数据输出到客户端浏览器


        重定向：
            重定向的特点：
                1、地址栏发生变化
                2、重定向可以访问其它站点(服务器)的资源
                3、重定向是两次请求，不可以用request对象来共享数据
            路径写法：
                1、路径的分类：
                    1、相对路径：通过相对路径不可以确定唯一资源
                        不以/开头，以.开头的路径
                        规则：找到当前资源和目标资源之间的相对位置关系
                    2、绝对路径：通过绝对路径可以确定唯一资源
                        以/开头的路径称为绝对路径
                        规则：判断定义的路径是给谁用的？判断请求从哪发出
                            给客户端浏览器使用：需要加虚拟目录
                                建议虚拟目录动态获取：request.getContextPath()
                            给服务器使用：不需要加虚拟目录
                                转发路径

     ServletContext对象：
        代表整个web应用，可以和程序容器(服务器)来通信
        获取方式：
            1、通过request对象获取
                request.getServletContext()
            2、通过HttpServlet获取
                this.getServletContext()
        功能：
            1、获取MIME类型
                MIME类型：在互联网通信过程中定义的一种文件数据类型
                    格式：大类型/小类型  text/html
                获取：String getMimeType(String file)
            2、域对象：共享数据
                方法：
                    1、void setAttribute(String name, Object obj)：存储数据
                    2、Object getAttribute(String name)：通过键获取对象
                    3、void removeAttribute(String name)：通过键移除键值对
                ServletContext对象范围：所有用户、所有请求的数据
            3、获取文件的真实(服务器)路径：
                    String getRealPath(String path)


