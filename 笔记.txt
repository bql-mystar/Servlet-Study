  Servlet的生命周期
  1、被创建：执行init方法，只执行一次
         Servlet什么时候被创建？
                   默认情况下，第一次访问时，Servlet被创建
                   可以配置执行Servlet的创建时机，通过配置web.xml中的<load-on-startup>标签的值及性能配置
                   一般用于加载资源

          Servlet的init方法只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的
                   多个用户同时访问，可能存在线程安全问题
                   解决：尽量不要在Servlet中定义成员变量，即使定义了成员变量，也不要修改值

  2、提供服务：执行service方法，执行多次
          每次访问Servlet时，Service方法都会被调用一次

  3、被销毁：执行destroy方法，只执行一次
           Servlet被销毁时执行，服务器关闭时，Servlet被销毁，
           只有服务器正常关闭时，才会执行destroy方法
           是在Servlet被销毁前执行，一般用于释放资源


  工作空间项目    和    tomcat部署的web项目(存在工作空间的out目录下)
        tomcat真正访问的是 “tomcat部署的web项目”, 这个项目对应着“工作空间项目”的目录下的所有资源，也就是web路径下的所有资源
        "tomcat部署的web项目"路径下的WEB-INF下的classes中的内容来源于，src下的Java文件，经过编译后，放到WEB-INF/classes

        WEB-INF目录下的资源不能被浏览器直接访问

  GenericServlet:将Servlet接口中其它的方法做了默认空实现，只将service()方法作为抽象
        将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可

  HttpServlet：对http协议的一种封装，简化操作
         1、定义继承HttpServlet
         2、复写doGet/doPost方法

  Servlet相关配置
         1、urlpattern：Servlet访问路径，可以是一个数组
                一个servlet可以定义多个访问路径
         2、路径定义规则：
                1、/xxx
                2、/xxx/xxx:多层路径，目录结构
                3、*.do

  超文本传输协议：定义了 客户端 和 服务器 通信时 发送的数据格式
  特点：
        1、基于TCP/IP的高级协议
        2、默认端口号：80
        3、基于请求/响应模型：一次请求对应一次响应
        4、无状态的：每次请求之间相互独立，不能交互数据

  历史版本
        1.0：每一次请求都会建立新的连接
        1.1：复用连接

  GET:
        1、请求参数在请求行中，在url后
        2、请求的url长度有限制
        3、不太安全

  POST:
        1、请求参数在请求体中
        2、请求的url长度没有限制
        3、相对安全

  常见的请求头：
        User-Agent：浏览器告诉服务器，浏览器的版本信息
                可以在服务器获取该头信息，解决浏览器的兼容性问题

        Referer：告诉服务器，当前请求的来源
             作用：
                    1、防盗链
                    2、统计工作

  request功能：
        1、获取请求信息
            1、获取请求行信息
                获取请求方式：String getMethod()
                获取虚拟目录：String getContextPath()
                获取Servlet路径：String getServletPath()
                获取get方式请求参数：String getQueryString()
                获取请求的URI：String getRequestURI()  String getRequestURL()
                        URL：统一资源定位符
                        URI：统一资源标识符
                获取协议及版本：String getProtocol()
                获取客户机的ip地址：String getRemoteAddr()
            2、获取请求头信息
                String getHeader(String name)：通过请求头的名称获取请求头的值
                Enumeration<String> getHeaderNames()：获取所有的请求头名称
            3、获取请求体信息
                请求体：只有POST请求方式才有请求体，在请求体中封装了POST的请求参数
                步骤：
                    1、获取流对象
                        1、BufferedReader getReader()：获取字符输入流，只能操作字符数据
                        2、ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型的数据
                            常用于文件上传
                    2、再从流对象中拿数据
        2、其他功能
            1、获取请求参数通用方式    不论是get还是post请求方式都可以使用下列的方式来获取参数
                1、String getParameter(String name)：根据参数名称来获取参数值
                2、String[] getParameterValues(String name)：根据参数名称来获取参数值的数组
                3、Enumeration<String> getParameterNames()：获取所有请求的参数名称
                4、Map<String, String[]> getParameterMap()：获取所有参数的map集合

                中文乱码问题：
                    get方式：tomcat8 已经将get方式乱码问题解决了
                    post方式：会乱码
                        解决方式：在获取参数前，设置request的编码    req.setCharacterEncoding("utf-8");

            2、请求转发：一种在服务器内部的资源跳转方式
                步骤：
                    1、通过request对象获取请求转发器对象：RequestDispathcher getRequestDispathcher(String path)
                    2、使用RequestDispathcher对象进行转发：forward(ServletRequest request, ServletResponse response)

                特点：
                    1、浏览器地址栏没有发生变化
                    2、只能访问到当前服务器内部资源中
                    3、转发是一次请求

            3、共享数据
                域对象：一个有作用范围的对象，可以在范围内共享数据
                request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据
                方法：
                    1、void setAttribute(String name, Object obj)：存储数据
                    2、Object getAttribute(String name)：通过键获取对象
                    3、void removeAttribute(String name)：通过键移除键值对

            4、获取ServletContext
