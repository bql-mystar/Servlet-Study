  Servlet的生命周期
  1、被创建：执行init方法，只执行一次
         Servlet什么时候被创建？
                   默认情况下，第一次访问时，Servlet被创建
                   可以配置执行Servlet的创建时机，通过配置web.xml中的<load-on-startup>标签的值及性能配置
                   一般用于加载资源

          Servlet的init方法只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的
                   多个用户同时访问，可能存在线程安全问题
                   解决：尽量不要在Servlet中定义成员变量，即使定义了成员变量，也不要修改值

  2、提供服务：执行service方法，执行多次
          每次访问Servlet时，Service方法都会被调用一次

  3、被销毁：执行destroy方法，只执行一次
           Servlet被销毁时执行，服务器关闭时，Servlet被销毁，
           只有服务器正常关闭时，才会执行destroy方法
           是在Servlet被销毁前执行，一般用于释放资源


  工作空间项目    和    tomcat部署的web项目(存在工作空间的out目录下)
        tomcat真正访问的是 “tomcat部署的web项目”, 这个项目对应着“工作空间项目”的目录下的所有资源，也就是web路径下的所有资源
        "tomcat部署的web项目"路径下的WEB-INF下的classes中的内容来源于，src下的Java文件，经过编译后，放到WEB-INF/classes

        WEB-INF目录下的资源不能被浏览器直接访问

  GenericServlet:将Servlet接口中其它的方法做了默认空实现，只将service()方法作为抽象
        将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可

  HttpServlet：对http协议的一种封装，简化操作
         1、定义继承HttpServlet
         2、复写doGet/doPost方法

  Servlet相关配置
         1、urlpattern：Servlet访问路径，可以是一个数组
                一个servlet可以定义多个访问路径
         2、路径定义规则：
                1、/xxx
                2、/xxx/xxx:多层路径，目录结构
                3、*.do

  超文本传输协议：定义了 客户端 和 服务器 通信时 发送的数据格式
  特点：
        1、基于TCP/IP的高级协议
        2、默认端口号：80
        3、基于请求/响应模型：一次请求对应一次响应
        4、无状态的：每次请求之间相互独立，不能交互数据

  历史版本
        1.0：每一次请求都会建立新的连接
        1.1：复用连接

  GET:
        1、请求参数在请求行中，在url后
        2、请求的url长度有限制
        3、不太安全

  POST:
        1、请求参数在请求体中
        2、请求的url长度没有限制
        3、相对安全

  常见的请求头：
        User-Agent：浏览器告诉服务器，浏览器的版本信息
                可以在服务器获取该头信息，解决浏览器的兼容性问题

        Referer：告诉服务器，当前请求的来源
             作用：
                    1、防盗链
                    2、统计工作

  request功能：
        1、获取请求信息
            1、获取请求行信息
                获取请求方式：String getMethod()
                获取虚拟目录：String getContextPath()
                获取Servlet路径：String getServletPath()
                获取get方式请求参数：String getQueryString()
                获取请求的URI：String getRequestURI()  String getRequestURL()
                        URL：统一资源定位符
                        URI：统一资源标识符
                获取协议及版本：String getProtocol()
                获取客户机的ip地址：String getRemoteAddr()
            2、获取请求头信息
                String getHeader(String name)：通过请求头的名称获取请求头的值
                Enumeration<String> getHeaderNames()：获取所有的请求头名称
            3、获取请求体信息
                请求体：只有POST请求方式才有请求体，在请求体中封装了POST的请求参数
                步骤：
                    1、获取流对象
                        1、BufferedReader getReader()：获取字符输入流，只能操作字符数据
                        2、ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型的数据
                            常用于文件上传
                    2、再从流对象中拿数据
        2、其他功能
            1、获取请求参数通用方式    不论是get还是post请求方式都可以使用下列的方式来获取参数
                1、String getParameter(String name)：根据参数名称来获取参数值
                2、String[] getParameterValues(String name)：根据参数名称来获取参数值的数组
                3、Enumeration<String> getParameterNames()：获取所有请求的参数名称
                4、Map<String, String[]> getParameterMap()：获取所有参数的map集合

                中文乱码问题：
                    get方式：tomcat8 已经将get方式乱码问题解决了
                    post方式：会乱码
                        解决方式：在获取参数前，设置request的编码    req.setCharacterEncoding("utf-8");

            2、请求转发：一种在服务器内部的资源跳转方式
                步骤：
                    1、通过request对象获取请求转发器对象：RequestDispathcher getRequestDispathcher(String path)
                    2、使用RequestDispathcher对象进行转发：forward(ServletRequest request, ServletResponse response)

                特点：
                    1、浏览器地址栏没有发生变化
                    2、只能访问到当前服务器内部资源中
                    3、转发是一次请求

            3、共享数据
                域对象：一个有作用范围的对象，可以在范围内共享数据
                request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据
                方法：
                    1、void setAttribute(String name, Object obj)：存储数据
                    2、Object getAttribute(String name)：通过键获取对象
                    3、void removeAttribute(String name)：通过键移除键值对

            4、获取ServletContext
                ServletContext getServletContext()


            前端页面form表单的action路径的写法：
                虚拟表单 + Servlet的资源路径

            BeanUtils工具类，简化数据封装
                1、用于封装JavaBean
                    1、JavaBean：标准的Java类
                        1、类必须被public修饰
                        2、必须提供空参的构造器
                        3、成员变量必须使用private修饰
                        4、提供公共的setter和getter方法

                    2、功能：封装数据

                2、概念：
                    成员变量：
                    属性：setter和getter方法截取后的产物    如：setUsername --> username

                    大多数情况下成员变量与属性相同

                3、方法：
                    1、setProperty()
                    2、getProperty()
                    3、populate(Object obj, Map map)：将map集合的键值对信息，封装到对应的JavaBean对象中

  HTTP协议：
        1、请求消息：客户端发送给服务器端的数据
            响应状态码：服务器告诉客户端浏览器本次请求服务和响应的一个状态
                分类：
                    1xx：服务器接收客户端消息，但没有接收完成，等待一段时间后，发送1xx状态码
                    2xx：成功
                    3xx：重定向。  302(重定向)，304(访问缓存)
                    4xx：客户端错误   404   405(请求方式没有对应的方法)
                    5xx：服务器端错误  500

            常间的响应头：
                Content-Type：服务器告诉客户端浏览器本次响应体数据格式以及编码格式
                Content-disposition：服务器告诉客户端以什么样的格式打开响应体数据
                    值：
                        in-line：默认值，在当前页面内打开
                        attachment;filename=xxx：以附件形式打开响应体。常用于文件下载

        2、响应消息：服务器端发送给客户端的数据

  Response对象：
    功能：设置响应消息
        1、设置响应行
            设置状态码：setStatus(int sc)
        2、设置响应头：setHeader(String name, String value)
        3、设置响应体：
            使用步骤：
                1、获取输出流：
                    字符输出流：PrintWriter getWriter()   默认编码方式ISO-8859-1
                    注意：
                        乱码问题：
                            编解码方式不一致
                            设置该流的默认编码
                            告诉浏览器响应使用的编码
                            response.setContentType("text/html;charset=utf-8"); // 必须要在获取流之前设置
                    字节输出流：ServletOutputStream getOutputStream()


                2、使用输出流，将数据输出到客户端浏览器


        重定向：
            重定向的特点：
                1、地址栏发生变化
                2、重定向可以访问其它站点(服务器)的资源
                3、重定向是两次请求，不可以用request对象来共享数据
            路径写法：
                1、路径的分类：
                    1、相对路径：通过相对路径不可以确定唯一资源
                        不以/开头，以.开头的路径
                        规则：找到当前资源和目标资源之间的相对位置关系
                    2、绝对路径：通过绝对路径可以确定唯一资源
                        以/开头的路径称为绝对路径
                        规则：判断定义的路径是给谁用的？判断请求从哪发出
                            给客户端浏览器使用：需要加虚拟目录
                                建议虚拟目录动态获取：request.getContextPath()
                            给服务器使用：不需要加虚拟目录
                                转发路径

     ServletContext对象：
        代表整个web应用，可以和程序容器(服务器)来通信
        获取方式：
            1、通过request对象获取
                request.getServletContext()
            2、通过HttpServlet获取
                this.getServletContext()
        功能：
            1、获取MIME类型
                MIME类型：在互联网通信过程中定义的一种文件数据类型
                    格式：大类型/小类型  text/html
                获取：String getMimeType(String file)
            2、域对象：共享数据
                方法：
                    1、void setAttribute(String name, Object obj)：存储数据
                    2、Object getAttribute(String name)：通过键获取对象
                    3、void removeAttribute(String name)：通过键移除键值对
                ServletContext对象范围：所有用户、所有请求的数据
            3、获取文件的真实(服务器)路径：
                    String getRealPath(String path)
                    1、获取web目录下的文件，直接以/开头
                    2、获取WEB-INF目录下的文件，直接以/WEB-INF开头
                    3、获取src目录下的文件，直接以/WEB-INF/classes开头,放在src目录下的文件最后会被放到WEB-INF下的classes目录

  Cookie：客户端会话技术，将数据保存到客户端
        使用步骤：
            1、创建Cookie对象，绑定数据
                new Cookie(String name, String value)
            2、发送Cookie对象
                response.addCookie(Cookie cookie)
            3、获取Cookie，拿到数据
                Cookie[] request.getCookies()

        实现原理：
            基于响应头set-cookie和请求头cookie实现

        cookie的细节：
            1、一次可以发送多个cookie
                可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可
            2、cookie在浏览器中保存的时间：
                默认情况下，当浏览器关闭后，cookie数据被销毁
                持久化存储：
                    setMaxAge(int seconds)
                        正数：将cookie数据写到硬盘的文件中，持久化存储，参数为cookie的存活时间
                        负数：默认值
                        零：删除cookie信息
            3、在tomcat8之前，cookie不能直接存储中文数据
                    需要将中文数据进行组转码---一般采用url编码
                在tomcat8之后，cookie支持中文数据，特殊字符还是不支持，建议使用url编码存储，url解码解析

            4、cookie的共享问题：
                    1、假设在一个tomcat服务器中，部署多个web项目，那么这些web项目中的cookie能不能共享？
                        默认情况下不能共享
                        setPath(String path)：设置cookie的获取范围。默认情况下会设置当前的虚拟目录
                            如果要共享，可以将path设置为/

                    2、不同的tomcat服务器间cookie共享问题？
                        setDomain(String path)：如果设置一级域名相同，那么多个服务器之间cookie可以共享

            5、cookie的特点：
                1、cookie存储数据在客户端浏览器
                2、浏览器对于单个cookie大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)

                作用：
                    1、cookie一般用于存储少量的不太敏感的数据
                    2、在不登陆的情况下，完成服务器对客户端的身份识别

  Session：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象，HttpSession
        获取Session对象：HttpSession session = request.getSession()
        HttpSession对象：
            Object getAttribute(String name)
            void setAttribute(String name, Object value)
            void removeAttribute(String name)

        原理：
            session的实现是依赖于cookie的

        细节：
            1、当客户端关闭后，服务器不关闭，两次获取Session是否为同一个
                默认情况下不是
                如果想解决这个问题：可以创建一个cookie对象，设置JSESSIONID的值为session对应的id，并设置失效时间即可
            2、当客户端不关闭，服务器关闭后，两次获取Session是否为同一个
                不是同一个，但是要确保数据不丢失
                    session的钝化：
                        在服务器正常关闭之前，将session对象序列化到硬盘上
                    session的活化
                        在服务器启动后，将session文件转化为内存中的session对象
            3、session的默认失效时间？session什么时候被销毁？
                1、服务器关闭
                2、session对象调用invalidate()
                3、session默认失效时间 30分钟
                    可以在web.xml中进行配置

        session的特点：
            1、session用于存储一次会话的多次请求的数据，存在服务器端
            2、可以存储任意类型、任意大小的数据

  session与cookie的区别：
        1、session存储与服务器端，cookie在客户端
        2、session没有数据大小限制，cookie有
        3、session数据安全，cookie相当于不安全

  Jsp：Jsp本质上就是一个Servlet
        1、服务器解析请求消息，找到对应的jsp资源(以index.jsp为例)
        2、如果找到了，会将index.jsp转化为.java文件
        3、编译.java文件，生成.class字节码文件
        4、由字节码提供访问

        Jsp脚本：Jsp声明Java代码的方式
            1、<% 代码 %>：定义的Java代码，在service方法中。service可以定义什么，该脚本中就可以定义什么
            2、<%! 代码 %>：定义的Java代码，在jsp转换后的Java类的成员位置。
            3、<%= 代码 %>：定义的Java代码，会输出到页面上，输出语句可以定义什么，该脚本中就可以定义什么

        Jsp内置对象：在jsp页面中不需要获取和创建，可以直接使用的对象
            jsp一共有9个内置对象
                request
                response
                out：JspWriter对象，字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似
                    response.getWriter()和out.write()的取区别：
                        在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据
                        response.getWriter()永远在out.write()之前
                pageContext：域对象，用于当前页面共享数据，还可以获取其它八个内置对象
                session
                application：ServletContext对象，所有用户间共享数据
                page：当前页面(Servlet)的对象 this
                config：ServletConfig对象，Servlet的配置对象
                exception：Throwable对象

        指令：
            作用：用于配置jsp页面，导入资源文件
            格式：
                <%@ 指令名称 属性名1=属性值1 属性名2=属性值2.... %>
            分类：
                1、page：用于配置jsp页面
                contentType：
                        1、设置响应体的mime类型以及字符集
                        2、设置当前jsp页面的编码（只有高级的ide才能生效，如果使用低级工具，需要设置pageEncoding属性设置当前页面的字符集）
                import：导包
                errorPage：当前页面发生异常后，会跳转到指定的错误页面
                isErrorPage：标识当前页面是否是错误页面
                    true：是，可以使用内置对象exception
                    false：否，默认值，不可以使用exception
                2、include：页面包含的，导入页面的资源文件
                3、taglib：导入资源

        注释：
            1、html注释    <!-- -->：只能注释html代码片段
            2、jsp注释 <%-- --%>：可以注释所有


  MVC开发模式
        M：Model，模型  JavaBean
            完成具体的业务操作：如：查询数据库，封装对象
        V：View，视图   Jsp
            展示数据
        C：Controller，控制器    Servlet
            获取用户的输入
            调用模型
            将数据交给视图进行展示


        优缺点：
            优点：
                1、耦合性低，方便维护，可以利于分工协作
                2、重用性高

            缺点：
                使得项目架构变得复杂，对开发人员要求高

  EL表达式：
        替换和简化jsp页面中Java代码的编写
        语法：${表达式}
        注意：jsp默认支持el表达式，如果要忽略el表达式
                                   1、设置jsp中page指令中的isELIgnored="true"忽略当前jsp页面中所有的el表达式
                                   2、\${表达式} 忽略当前el表达式
        使用：
            1、运算
                运算符：
                    1、算术运算符
                    2、比较运算符
                    3、逻辑运算符
                    4、空运算符：empty
                        功能：
                        ${empty list} 用于判断字符串、集合、数组对象是否为null，并且长度是否为0
                        ${not empty list} 用于判断字符串、集合、数组对象是否不为null，并且长度大于0

            2、获取值
                1、el表达式只能从域对象中获取值
                2、语法：
                    1、${域名称.键名}：从指定域中获取指定键的值
                        域名称：
                            1、pageScope --> pageContext
                            2、requestScope --> request
                            3、sessionScope --> session
                            4、applicationScope --> application(ServletContext)

                    2、${键名}：表示一次从最小的域中查找是否有该键对应的值，直到找到为止
                    3、获取对象：List集合、Map集合的值


        隐式对象：el表达式有11个隐式对象
            pageContext：
                1、获取jsp其它八个内置对象

  JSTL标签：jsp标准标签库
        是由apache组织提供的开源的免费的jsp标签

        用于简化和替换jsp页面上的Java代码

        使用步骤：
            1、导入jstl相关jar包
            2、引入标签库：taglib指令
            3、使用标签

        常用的jstl标签
            if：相当于Java代码的if语句
            choose：相当于Java代码的switch语句
            foreach：相当于Java代码的for语句

  三层架构：软件设计架构
        1、界面层(表示层)：用户看得到的界面。用户可以通过界面上的组件和服务器进行交互，接收参数，封装数据。调用业务逻辑层完成处理，转发jsp页面完成显示
        2、业务逻辑层：处理业务逻辑，组合DAO层的简单方法，形成复杂的功能(业务逻辑操作)
        3、数据访问层(dao层)：操作数据存储文件，定义了对数据库最基本的CRUD操作


   Filter：过滤器
        web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能
        过滤器的作用：
                一般用于完成通用的操作，如：登陆验证、统一编码处理、敏感字符过滤

        步骤：
            1、定义一个类，实现接口Filter
            2、复写方法
            3、配置拦截路径
                1、web.xml
                        <filter>
                            <filter-name>demo01</filter-name>
                            <filter-class>com.xie.filter.Filter02</filter-class>
                        </filter>

                        <filter-mapping>
                            <filter-name>demo01</filter-name>
                            <url-pattern>/*</url-pattern>
                        </filter-mapping>
                2、注解  @WebFilter 注解

        过滤器执行流程：
            1、执行过滤器
            2、执行放行后的资源
            3、回来执行过滤器放行代码下面的代码
        过滤器生命周期方法：
            服务器启动后，会创建Filter对象，然后调用init方法
            每一次请求被拦截资源时，会执行doFilter方法
            在服务器关闭后，Filter对象被销毁，如果服务器是正常关闭，则会执行destroy方法
        过滤器配置详解：
            1、拦截路径配置：
                具体的资源路径：/index.jsp
                目录拦截：/user/*
                后缀名拦截：*.jsp
                拦截所有资源：/*
            2、拦截方式配置：资源被访问的方式
                注解配置：
                    设置属性：dispatcherTypes
                        1、request：默认值，浏览器直接请求资源
                        2、forward：转发访问资源
                        3、include：包含访问资源
                        4、error：错误跳转资源
                        5、async：异步访问资源
                web.xml配置
                    <dispatcher>REQUEST</dispatcher>    <!-- 在filter-mapping中配置这行即可 -->

        过滤器链(配置多个过滤器)：
            执行顺序：如果有两个过滤器：过滤器1和过滤器2
                    1、过滤器1
                    2、过滤器2
                    3、资源自行
                    4、过滤器2回来执行
                    5、过滤器1回来执行

            过滤器先后顺序问题：
                1、注解配置： 按照类名的字符串比较规则比较，值小的先执行
                        如：AFilter 和 BFilter     AFilter限制性
                2、web.xml配置：谁定义在上面，谁先执行

   增强对象功能：
        设计模式：一些通用的解决固定问题的方式
        装饰模式
        代理模式：
            概念：
                真实对象：被代理的对象
                代理对象：
                代理模式：代理对象代理真实对象，达到增强真实功能的目的
            实现方式：
                动态代理：在内存中来形成代理类
                静态代理：有一个类文件描述代理模式
                    实现步骤：
                        1、代理对象和真实对象实现相同的接口
                        2、代理对象 = Proxy.newProxyInstance()
                        3、使用代理对象调用方法
                        4、增强方法

            增强方式：
                1、增强参数列表：
                2、增强返回值类型
                3、增强方法体执行逻辑

   Listener：监听器
        事件监听机制：
            事件：一件事情
            事件源：事件发生的地方
            监听器：一个对象
            注册监听：将事件、事件源、监听器绑定在一起，当事件源上发生某个事件后，执行监听器代码

        ServletContextListener

        步骤：
            1、定义一个类。实现ServletContextListener接口
            2、复写方法
            3、配置
                1、web.xml
                        <listener>
                            <listener-class>com.xie.listener.ServletContextListener01</listener-class>
                        </listener>

                        指定初始化参数<context-param>
                2、注解
                        @WebListener


   JSON数据和Java对象的相互转换
        JSON解析器：
            常间的解析器：Jsonlib，Gson，fastjson，jackson

        JSON -> Java
             1、使用步骤：
                1、导入Jackson的jar包
                2、创建Jackson核心对象：ObjectMapper
                3、调用ObjectMapper的相关方法进行转换
                    readValue(json字符串数据, Class类型)


        Java -> JSON
            1、使用步骤：
                1、导入Jackson的jar包
                2、创建Jackson核心对象：ObjectMapper
                3、调用ObjectMapper的相关方法进行转换
                              转换方法
                                   writeValue(参数1, Object obj)
                                           参数1：
                                               File：将obj对象转换为json字符串，并保存到指定的文件中
                                               Writer：将obj对象转换为json字符串，并将json数据填充到字符输出流中
                                               OutputStream：：将obj对象转换为json字符串，并将json数据填充到字符节输出流中
                                   writeValueAsString(Object obj)：将对象转为json字符串

            2、注解：
                1、@JsonIgnore：排除属性
                2、@JsonFormat：属性值的格式化
